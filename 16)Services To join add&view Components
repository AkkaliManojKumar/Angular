ng g c view       --------->>>> Generate VIEW component
ng g c add        --------->>>> Generate add component
ng g s student    --------->>>> Generate student service

//// *** Service DEFINATION : To share common functionality [OR] common data code use angular service

//// *** In service @InJectable annotation will be there 

/// *** here we are injecting the service component data to view component that is called dependency injection 
///*** view is dependent on the service component

----------------------------------------------------------------------------------------------------------------------------------------------------------
1)bind data from HTML                                       1) Get the student array from 
2) send student object to service                             service.
using add method of service.                                2) Display it in HTML.
 |                                                                     |
 |                                                                     |
 |                                                                     |
ADD <-----------> SERVICE <----------------------------------------> VIEW
                     |
                     |
                     |
                     |
                  array
                  1) ADD ---> push to array
                  2) GET ---> get students give to array



---------------------------------------------------------------// student.service.ts \\-------------------------------------------------------------


                                    //============= this service has data ==== this is injected to the required componnets\\\

import { Injectable } from '@angular/core';
import { Student } from 'src/student.model';

@Injectable({                        //**** injectable undhu kabatte idhi servuce ayyindhi
  providedIn: 'root'   // root ante service root level lo inject chesthunnam anna mata
  
})
export class StudentService {     // service class name


// in service class we create the data and share it to all the components

  students:Student[]=[];
  constructor() { 

   let stud1 ={'rollNo':2,'gender':'male','name':'rock','marks':56,'sem':6}
   let stud2 ={'rollNo':3,'gender':'male','name':'john','marks':57,'sem':5}
   let stud3 ={'rollNo':4,'gender':'male','name':'brock','marks':58,'sem':4}

   let stud4 ={'rollNo':5,'gender':'female','name':'preeti','marks':57,'sem':5}
   let stud5 ={'rollNo':6,'gender':'female','name':'prachi','marks':58,'sem':4}


   this.students.push(stud1);
   this.students.push(stud2);
   this.students.push(stud3);
   this.students.push(stud4);
   this.students.push(stud5);

  }

  
  addStudent(student:Student)
  {

  
    this.students.push(student);
  }

  public  getStudents():Student[]
  {
    return this.students;
  }

}

----------------------------------  student.model.ts -------------------------------------------  

// in model class we allways declare the variabels 

export class Student
{

    rollNo:number=0;

    gender:string='';

    name='';
    marks=0;
    sem=0;


//int -Integer
}


------------------------------------------- app.comp.html  -------------------- 





<p> add student </p>   
<app-add> </app-add>   ///**** add-student component is called


<p> view students </p>    
<app-view> </app-view>    ///*** view-student component is called


------------------------------------------ add.comp.html  ----------------------------------------------------

<table> 

  <tr> 
    <td> 
<label> roll no</label>
</td>
<td>  
<input type="text" [(ngModel)]="student.rollNo" >
</td>

</tr>


<tr>
<td> 
<label> gender </label> 
</td>

<td> 
<input type="text" [(ngModel)]="student.gender" >
</td>

</tr>

<tr> 
    <td> 
<label> sem</label> 
</td>

<td> 
<input type="text" [(ngModel)]="student.sem" >
</td>

</tr>

<tr>  
<td> 
<label> name</label> 
</td>

<td> 
<input type="text" [(ngModel)]="student.name" >
</td>

</tr>


<tr> 
<td> 
<label> marks</label> 
</td>

<td> 
<input type="text" [(ngModel)]="student.marks" >
</td>
</tr>

<tr> 
<td>

</td>


<td> 
<button (click)="addStudent(student)"> add </button>
</td>
</tr>
</table>

--------------------------------------------------------------  add.comp.ts   ---------------------------------------------------------------- 

import { Component, OnInit } from '@angular/core';
import { Student } from 'src/student.model';
import { StudentService } from '../student.service';

@Component({
  selector: 'app-add',
  templateUrl: './add.component.html',
  styleUrls: ['./add.component.css']
})
export class AddComponent  {

  students:Student[]=[];

  student:Student;    //**** here model class object created
  
  constructor(private studSrv:StudentService)    // student service instance created --------- >>>>> this is dependency injection (DI)  <<<<-----
  {
    this.student=new Student();   //*** model class instance created
  }

  addStudent(student:Student)
  {

    let stud={rollNo:student.rollNo,gender:student.gender,name:student.name,marks:student.marks,sem:student.sem};

    this.studSrv.addStudent(stud);
  }

}


------------------------------------------------------------   view.comp.html  --------------------------------------------------------------------------





<table> 

    <tr> 
        <td> Roll no </td> 
        <td> Gender </td>
        <td> Name </td>
        <td> Marks </td>
        <td> Sem </td>
    
    </tr>


    <tr *ngFor="let student of students"> 
        <td> {{student.rollNo}} </td> 
        <td> {{student.gender}} </td>
        <td> {{student.name|gender:student.gender}} </td>
        <td> {{student.marks}} </td>
        <td> {{student.sem}} </td>
    
    </tr>


</table>


----------------------------------------------------------------   view.comp.ts  -----------------------------------------------------------------------


import { Component, OnInit } from '@angular/core';
import { Student } from 'src/student.model';
import { AddComponent } from '../add/add.component';
import { StudentService } from '../student.service';

@Component({
  selector: 'app-view',
  templateUrl: './view.component.html',
  styleUrls: ['./view.component.css']
})
export class ViewComponent implements OnInit {

  students:Student[]=[];

//private studSrv:StudentService;
  //dependency injection 
  constructor(private studSrv:StudentService) { 

  //  this.studSrv=studSrv;
  }


  ngOnInit(): void {
    this.students =this.studSrv.getStudents();
  }



}


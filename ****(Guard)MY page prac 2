ng g guard dnr  // to genareate guard
--> select can activate

-------------------------------------------------------------------------------------------   dnr.guard.ts   --------------------------------------------------------
//GUARd is same like service file diffrence is that sevice not have canActivate file 
    Guard has CanActivated file
    
    ///** GUARD will restrict the acces to component if admin login he get acces // if user login he cannot acces the component


import { Injectable } from '@angular/core';
import { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree } from '@angular/router';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})

export class DnrGuard implements CanActivate {               // imlements canactivate means it is guard 
  canActivate(
    route: ActivatedRouteSnapshot,
    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {
    
      let usrType=localStorage.getItem('userType');              // Local storage is HTML web storage 
    
      if(usrType=='admin')
      {
      return true;
      }
      else{
        alert('cannot access')

        return false;
      }
    }
  
}


----------------------------------------------------------------------------------------------------------------  login.ts ---------------------------------------

import { Component, OnInit } from '@angular/core';
import { Route, Router } from '@angular/router';

@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.css']
})
export class LoginComponent implements OnInit {

  constructor(private router:Router) { }

  ngOnInit(): void {
  }

  userName='';
  password='';

  validateLogin(){

    if(this.userName=='admin' && this.password=='admin123')
    {
      alert('admin logged in')
      this.router.navigate(['main',this.userName,this.password])
      
      localStorage.setItem('userType','admin');       //********* userType----> key, admin-----> value

    }
    else if(this.userName=='user' && this.password=='user123')
    {
      alert('user logged in')
      this.router.navigate(['main',this.userName,this.password])
      
      // local storage is storing data in html browser (user is stored with key UserType in browser)
      localStorage.setItem('userType','user');     //**** userType-------> key,  user------.value     // set item will set user to key 
    }
    else
    {
      alert('invalid login')
    }
  }

}


--------------------------------------------------------------------------------------------------  app-routing.module.ts ----------------------------------


import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';
import { AboutComponent } from './about/about.component';
import { ContactComponent } from './contact/contact.component';
import { DnrGuard } from './dnr.guard';
import { HomeComponent } from './home/home.component';
import { LoginComponent } from './login/login.component';
import { MaincompComponent } from './maincomp/maincomp.component';
import { CarrestComponent } from './services/carrest/carrest.component';
import { CarwashComponent } from './services/carwash/carwash.component';

import { DentingandrepairComponent } from './services/dentingandrepair/dentingandrepair.component';  

import { FlooringComponent } from './services/flooring/flooring.component';
import { ServicesComponent } from './services/services.component';

const routes: Routes = [
  {path:'',redirectTo:'login',pathMatch:'full'},
  {path:'home',component:HomeComponent},
  {path:'about',component:AboutComponent},
  {path:'contact',component:ContactComponent},
  {path:'services',component:ServicesComponent,
  children:[
  {path:'carwash',component:CarwashComponent},
  {path:'carrent',component:CarrestComponent},
  {path:'dnr',component:DentingandrepairComponent,canActivate:[DnrGuard]},  ////*******  //**** to restrict this component from user and give acces to only admin use this
                                                                            //// canActivate[DnrGuard]----> this restrict the denting and repair component
                                                                            ///Dnr means denting and repair Dnr is just guard name
  {path:'flooring',component:FlooringComponent}           
   
  ]
  },
  {path:'login',component:LoginComponent},
  {path:'main/:userId/:pass',component:MaincompComponent}

];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }







-------------------------------------------------------------------------------------------------------app.com.html----



<router-outlet></router-outlet>
------------- ------------------------------------------------------------------------------------------app.routing module.ts ---------
import { Component, NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { HomeComponent } from './home/home.component';
import { LoginComponent } from './login/login.component';
import { MaincompComponent } from './maincomp/maincomp.component';
import { CarrentComponent } from './services/carrent/carrent.component';
import { CarwashComponent } from './services/carwash/carwash.component';
import { ServicesComponent } from './services/services.component';

const routes: Routes = [
  {path:'',redirectTo:'login',pathMatch:'full'},
  {path:'home',component:HomeComponent},
  {path:'login',component:LoginComponent},
                                            {path:'maincomp/:userId/:pass',component:MaincompComponent},     // userId  means ---->admin (or) user who logged in to be known
  {path:'services',component:ServicesComponent,
   children:[
        {path:'carwash',component:CarwashComponent},
        {path:'carrent',component:CarrentComponent},
        ]
  },
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }
-------------------------------------------------------------------------------------------------------------- login.html------------
<p>login works!</p>
<br>
<p>Enter user name</p>
<input type="text" [(ngModel)]="username">
<br>
<p>Enter password</p>
<input type="text" [(ngModel)]="password">
<br>
<button (click)="validate()">login</button>
-------------------------------------------------------------------------------------------------------login.ts-------------
import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
Router
@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.css']
})
export class LoginComponent implements OnInit {

  constructor(private router:Router) { }
  username='kk'
  password=''
  validate(){

    if(this.username=='admin' && this.password=='admin@123'){
      alert('admin login succesfull')
      this.router.navigate(['maincomp',this.username,this.password])        // user is placed to get like admin loged in----->(maincomp/admin)
    }
    else if(this.username=='user'&&this.password=='user@123'){
      alert('user login succesfull')
      this.router.navigate(['maincomp',this.username,this.password])          //this are called as path parameters 
    }
  }

  ngOnInit(): void {
  }

}
-----------------------------------------------------------------------------------------------------------------home.html-------------
<p>home works!</p>
-------------------------------------------------------------------------------------------------------------home.ts---------------
import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-home',
  templateUrl: './home.component.html',
  styleUrls: ['./home.component.css']
})
export class HomeComponent implements OnInit {

  constructor() { }

  ngOnInit(): void {
  }

}
--------------------------------------------------------------------------------------------------------------------maincomp.html--------------
<p>maincomp works!</p>

welcome {{userName}} having password {{PASSWORD}}            // WE ARE FETCHING THE DATA FROM THE TS.FILE


<ul>
    <li>
    <a routerLink="/home">home</a>
</li>
<li>
    <a routerLink="/login">login</a>
</li>
<li>
    <a routerLink="/services">services</a>
</li>
</ul>
<router-outlet></router-outlet>
--------------------------------------------------------------------------------------------------------------  maincomp.ts  ----------------------
import { Component, OnInit } from '@angular/core';
@Component({
  selector: 'app-maincomp',
  templateUrl: './maincomp.component.html',
  styleUrls: ['./maincomp.component.css']
})
export class MaincompComponent implements OnInit {

  constructor(private actv:ActivatedRoute) { }         // Activateroute is used   --->  get data

  ngOnInit(): void {                                         //ngOninit method load ts FILE automatically 
    this.readPathVar();
  }

  USERNAME = '';
  PASSWORD = '';
  readPathVar()
  {


    this.actv.params.subscribe(

     data =>{
    this.USERNAME =  data['userId'];   //*** WE ARE ASSIGINING DATA WE GOT FROM LOGIN COMPONENT TO USERNAME
     this.PASSWORD = data['pass'];
     }
   );

}
---------------------------------------------------------------------------------------------------------------service.html------------
<p>services works!</p>

<ul>
    <li routerLink="carwash" >carwash</li>
    <li routerLink="carrent">carrent</li>
</ul>

---------------------------------------------------------------------------------------------------------------service.ts-----------------
import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-services',
  templateUrl: './services.component.html',
  styleUrls: ['./services.component.css']
})
export class ServicesComponent implements OnInit {

  constructor() { }

  ngOnInit(): void {
  }

}



-------------------------------------------------------------------------------------------------------------
PATH PARAMETERS : pathparameters are used to take data from one (1component) to other (2component) 
once data taken from comp1 to comp2 that data from comp2 cannot send to other component
